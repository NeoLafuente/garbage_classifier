window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "train", "modulename": "train", "kind": "module", "doc": "<p>Training Script for Garbage Classification Model.</p>\n\n<p>This script orchestrates the training process for a garbage classification\nmodel using PyTorch Lightning. It initializes the data module, model,\ncallbacks, and trainer, then executes the training loop and saves the\ntrained model checkpoint.</p>\n\n<p>The script performs the following steps:</p>\n\n<ol>\n<li>Initializes the GarbageDataModule with stratified train/test split</li>\n<li>Creates a GarbageClassifier model (ResNet18-based)</li>\n<li>Sets up loss curve visualization callback</li>\n<li>Configures PyTorch Lightning Trainer with specified hyperparameters</li>\n<li>Trains the model on the garbage dataset</li>\n<li>Saves the trained model checkpoint</li>\n</ol>\n\n<h6 id=\"usage\">Usage</h6>\n\n<p>Command line:</p>\n\n<pre><code>$ uv run train.py\n</code></pre>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Configuration parameters are loaded from <code>utils.config</code> module:</p>\n\n<ul>\n<li><code>MAX_EPOCHS</code>: Maximum number of training epochs</li>\n<li><code>LOSS_CURVES_PATH</code>: Directory for saving loss and accuracy plots</li>\n<li><code>MODEL_PATH</code>: Path where the trained model checkpoint will be saved</li>\n</ul>\n\n<p>The training uses automatic device selection (GPU if available, otherwise CPU)\nand disables sanity validation steps for faster startup.</p>\n"}, {"fullname": "predict", "modulename": "predict", "kind": "module", "doc": "<p>Garbage Classification Prediction Script.</p>\n\n<p>This script loads a trained GarbageClassifier model and performs inference\non a single image to predict its garbage category. The script can accept\nan image path as a command-line argument or use a default sample image.</p>\n\n<p>The prediction uses a pretrained ResNet18 model fine-tuned for 6-class\ngarbage classification (cardboard, glass, metal, paper, plastic, trash).</p>\n\n<h6 id=\"usage\">Usage</h6>\n\n<p>Command line:</p>\n\n<pre><code>$ uv run predict.py &lt;path_to_image&gt;\n</code></pre>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Predict with custom image:</p>\n\n<pre><code>$ uv run predict.py img.jpg\n</code></pre>\n\n<p>Predict with default sample image:</p>\n\n<pre><code>$ uv run predict.py\n</code></pre>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The model checkpoint path is configured in <code>utils.config</code></li>\n<li>Images are automatically preprocessed using ImageNet normalization</li>\n<li>Prediction runs on GPU if available, otherwise falls back to CPU</li>\n</ul>\n"}, {"fullname": "predict.predict_image", "modulename": "predict", "qualname": "predict_image", "kind": "function", "doc": "<p>Predict the garbage category of an input image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_path</strong> (str):\nPath to the image file to classify.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple of (str, int)</strong>: A tuple containing the predicted class name and class index.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pred_class</span><span class=\"p\">,</span> <span class=\"n\">pred_idx</span> <span class=\"o\">=</span> <span class=\"n\">predict_image</span><span class=\"p\">(</span><span class=\"s2\">&quot;sample.jpg&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Prediction: </span><span class=\"si\">{</span><span class=\"n\">pred_class</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The function automatically handles device selection (GPU/CPU) and\napplies the appropriate image transformations for the ResNet18 model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "predict.main", "modulename": "predict", "qualname": "main", "kind": "function", "doc": "<p>Main entry point for the prediction script.</p>\n\n<p>Parses command-line arguments and performs prediction on the specified\nimage or a default sample image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.config", "modulename": "utils.config", "kind": "module", "doc": "<p>Configuration Module for Garbage Classification Project.</p>\n\n<p>This module contains all configuration parameters and constants used\nthroughout the garbage classification project, including dataset paths,\nmodel parameters, and class definitions.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>DATASET_PATH</strong> (str):\nPath to the raw garbage dataset directory containing training images.</li>\n<li><strong>LOSS_CURVES_PATH</strong> (str):\nDirectory path where training/validation loss and accuracy curves are\nsaved.</li>\n<li><strong>MODEL_PATH</strong> (str):\nPath where the trained model checkpoint is saved or loaded from.</li>\n<li><strong>SAMPLE_IMG_PATH</strong> (str):\nPath to a sample image used for default predictions.</li>\n<li><strong>CLASS_NAMES</strong> (list of str):\nList of garbage category names for classification.\nCategories: cardboard, glass, metal, paper, plastic, trash.</li>\n<li><strong>MAX_EPOCHS</strong> (int):\nMaximum number of training epochs.</li>\n<li><strong>NUM_CLASSES</strong> (int):\nNumber of classification categories (derived from CLASS_NAMES length).</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">config</span> <span class=\"k\">as</span> <span class=\"n\">cfg</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">GarbageClassifier</span><span class=\"p\">(</span><span class=\"n\">num_classes</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">NUM_CLASSES</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Trainer</span><span class=\"p\">(</span><span class=\"n\">max_epochs</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">MAX_EPOCHS</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>All paths are relative to the project root directory. Ensure the directory\nstructure matches the configured paths before running training or inference.</p>\n"}, {"fullname": "utils.config.DATASET_PATH", "modulename": "utils.config", "qualname": "DATASET_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;../data/raw/sample_dataset/&#x27;"}, {"fullname": "utils.config.LOSS_CURVES_PATH", "modulename": "utils.config", "qualname": "LOSS_CURVES_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;../models/performance/loss_curves/&#x27;"}, {"fullname": "utils.config.MODEL_PATH", "modulename": "utils.config", "qualname": "MODEL_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;../models/weights/model_resnet18_garbage.ckpt&#x27;"}, {"fullname": "utils.config.SAMPLE_IMG_PATH", "modulename": "utils.config", "qualname": "SAMPLE_IMG_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sample.jpg&#x27;"}, {"fullname": "utils.config.CLASS_NAMES", "modulename": "utils.config", "qualname": "CLASS_NAMES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;cardboard&#x27;, &#x27;glass&#x27;, &#x27;metal&#x27;, &#x27;paper&#x27;, &#x27;plastic&#x27;, &#x27;trash&#x27;]"}, {"fullname": "utils.config.MAX_EPOCHS", "modulename": "utils.config", "qualname": "MAX_EPOCHS", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "utils.config.NUM_CLASSES", "modulename": "utils.config", "qualname": "NUM_CLASSES", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "utils.custom_classes.GarbageClassifier", "modulename": "utils.custom_classes.GarbageClassifier", "kind": "module", "doc": "<p>Garbage Classification Model Module.</p>\n\n<p>This module implements a PyTorch Lightning module for garbage classification\nusing a pretrained ResNet18 model. The classifier is fine-tuned for a 6-class\ngarbage classification problem (cardboard, glass, metal, paper, plastic,\ntrash).</p>\n\n<p>The model uses transfer learning by freezing the pretrained ResNet18 feature\nextraction layers and training only the final classification layer.</p>\n"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier", "kind": "class", "doc": "<p>Pretrained (ImageNet) ResNet18 adapted to Garbage Dataset Classification\nproblem.\nIt considers 6 classes: cardboard, glass, metal, paper, plastic and trash.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>model</strong> (torchvision.models.resnet18):\nPretrained ResNet18 model.</li>\n<li><strong>loss_fn</strong> (torch.nn.CrossEntropyLoss):\nCross entropy loss function.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">GarbageClassifier</span><span class=\"p\">(</span><span class=\"n\">num_classes</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Trainer</span><span class=\"p\">(</span><span class=\"n\">max_epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">accelerator</span><span class=\"o\">=</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">datamodule</span><span class=\"o\">=</span><span class=\"n\">data_module</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "pytorch_lightning.core.module.LightningModule"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.__init__", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.__init__", "kind": "function", "doc": "<p>Initialize the GarbageClassifier model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_classes</strong> (int):\nNumber of output classes for classification.</li>\n<li><strong>lr</strong> (float, optional):\nLearning rate for the optimizer (default is 1e-3).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span></span>)</span>"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.model", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.loss_fn", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.loss_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.forward", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.forward", "kind": "function", "doc": "<p>Forward pass through the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\nInput tensor of images with shape (batch_size, channels, height,\nwidth).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Output logits with shape (batch_size, num_classes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.training_step", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.training_step", "kind": "function", "doc": "<p>Model parameters are updated according to the classification error\nof a subset of train images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>batch</strong> (Tuple[torch.Tensor, torch.Tensor]):\nSubset (batch) of images coming from the train dataloader.\nContains input images and corresponding labels.</li>\n<li><strong>batch_idx</strong> (int):\nIdentifier of the batch within the current epoch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Classification error (cross entropy loss) of trained image batch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.validation_step", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.validation_step", "kind": "function", "doc": "<p>Compute validation loss and accuracy for a batch of validation images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>batch</strong> (Tuple[torch.Tensor, torch.Tensor]):\nSubset (batch) of images coming from the validation dataloader.\nContains input images and corresponding labels.</li>\n<li><strong>batch_idx</strong> (int):\nIdentifier of the batch within the current validation epoch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Validation accuracy for the current batch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageClassifier.GarbageClassifier.configure_optimizers", "modulename": "utils.custom_classes.GarbageClassifier", "qualname": "GarbageClassifier.configure_optimizers", "kind": "function", "doc": "<p>Configure the optimizer for training.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.optim.Adam</strong>: Adam optimizer configured with model parameters and learning rate\nfrom hyperparameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageDataModule", "modulename": "utils.custom_classes.GarbageDataModule", "kind": "module", "doc": "<p>Garbage Dataset DataModule for PyTorch Lightning.</p>\n\n<p>This module provides a LightningDataModule implementation for loading and\npreparing the garbage classification dataset with stratified train/test splits.</p>\n"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule", "kind": "class", "doc": "<p>PyTorch Lightning DataModule for Garbage Classification Dataset.</p>\n\n<p>This DataModule handles loading, splitting, and creating dataloaders for\nthe garbage classification dataset. It performs a stratified 90/10\ntrain/test split and applies ResNet18 ImageNet preprocessing transforms.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>batch_size</strong> (int):\nNumber of samples per batch for training.</li>\n<li><strong>num_workers</strong> (int):\nNumber of subprocesses to use for data loading.</li>\n<li><strong>transform</strong> (torchvision.transforms.Compose):\nImage preprocessing transforms from ResNet18 ImageNet weights.</li>\n<li><strong>train_dataset</strong> (torch.utils.data.Subset):\nTraining dataset subset.</li>\n<li><strong>test_dataset</strong> (torch.utils.data.Subset):\nTest/validation dataset subset.</li>\n<li><strong>train_idx</strong> (numpy.ndarray):\nIndices of samples in the training set.</li>\n<li><strong>test_idx</strong> (numpy.ndarray):\nIndices of samples in the test set.</li>\n<li><strong>num_classes</strong> (int):\nNumber of classes in the dataset.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_module</span> <span class=\"o\">=</span> <span class=\"n\">GarbageDataModule</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">num_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data_module</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"n\">data_module</span><span class=\"o\">.</span><span class=\"n\">train_dataloader</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">val_loader</span> <span class=\"o\">=</span> <span class=\"n\">data_module</span><span class=\"o\">.</span><span class=\"n\">val_dataloader</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "pytorch_lightning.core.datamodule.LightningDataModule"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.__init__", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.__init__", "kind": "function", "doc": "<p>Initialize the GarbageDataModule.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>batch_size</strong> (int, optional):\nNumber of samples per batch for training (default is 32).</li>\n<li><strong>num_workers</strong> (int, optional):\nNumber of subprocesses to use for data loading (default is 4).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span>, </span><span class=\"param\"><span class=\"n\">num_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span></span>)</span>"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.batch_size", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.num_workers", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.num_workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.transform", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.setup", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.setup", "kind": "function", "doc": "<p>Prepare the dataset by loading and splitting into train and test sets.</p>\n\n<p>Loads the full dataset from the configured path, performs a stratified\n90/10 train/test split to ensure balanced class distribution, and\ncreates dataset subsets for training and validation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stage</strong> (str, optional):\nCurrent stage ('fit', 'validate', 'test', or 'predict').\nNot used in this implementation (default is None).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The dataset is split using a stratified approach with random_state=42\nfor reproducibility. The split ratio is 90% training and 10% testing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.train_dataloader", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.train_dataloader", "kind": "function", "doc": "<p>Create and return the training dataloader.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.utils.data.DataLoader</strong>: DataLoader for the training dataset with shuffling enabled.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The dataloader uses the configured batch_size and num_workers,\nand shuffles the data at each epoch.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.GarbageDataModule.GarbageDataModule.val_dataloader", "modulename": "utils.custom_classes.GarbageDataModule", "qualname": "GarbageDataModule.val_dataloader", "kind": "function", "doc": "<p>Create and return the validation dataloader.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.utils.data.DataLoader</strong>: DataLoader for the validation/test dataset without shuffling.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The dataloader uses a fixed batch_size of 1000 for faster validation,\nwith num_workers from configuration. Shuffling is disabled to ensure\nconsistent validation metrics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.LossCurveCallback", "modulename": "utils.custom_classes.LossCurveCallback", "kind": "module", "doc": "<p>PyTorch Lightning Callback for Loss and Accuracy Curve Visualization.</p>\n\n<p>This module provides a custom callback that tracks and visualizes training\nand validation metrics during model training, saving plots and raw data to\ndisk.</p>\n"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback", "kind": "class", "doc": "<p>PyTorch Lightning callback for tracking and plotting loss curves.</p>\n\n<p>This callback monitors training loss, validation loss, and validation\naccuracy throughout the training process. At the end of training, it\ngenerates and saves visualization plots and raw metric data.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>save_dir</strong> (str):\nDirectory path where plots and metrics will be saved.</li>\n<li><strong>train_losses</strong> (list of float):\nTraining loss values collected at the end of each training epoch.</li>\n<li><strong>val_losses</strong> (list of float):\nValidation loss values collected at the end of each validation epoch.</li>\n<li><strong>val_accs</strong> (list of float):\nValidation accuracy values collected at the end of each validation\nepoch.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pytorch_lightning</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Trainer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">LossCurveCallback</span><span class=\"p\">(</span><span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;./outputs/curves&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">Trainer</span><span class=\"p\">(</span><span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">callback</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">datamodule</span><span class=\"o\">=</span><span class=\"n\">data_module</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The callback creates three output files in the save_dir:</p>\n\n<ul>\n<li>loss_curve.png: Plot of training and validation losses</li>\n<li>val_acc_curve.png: Plot of validation accuracy</li>\n<li>metrics.json: Raw metric data in JSON format</li>\n</ul>\n", "bases": "pytorch_lightning.callbacks.callback.Callback"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.__init__", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.__init__", "kind": "function", "doc": "<p>Initialize the LossCurveCallback.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>save_dir</strong> (str, optional):\nDirectory path where plots and metrics will be saved\n(default is cfg.LOSS_CURVES_PATH).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The save directory is created automatically if it does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;../models/performance/loss_curves/&#39;</span></span>)</span>"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.save_dir", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.save_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.train_losses", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.train_losses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.val_losses", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.val_losses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.val_accs", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.val_accs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.on_train_epoch_end", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.on_train_epoch_end", "kind": "function", "doc": "<p>Called at the end of each training epoch to collect training loss.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trainer</strong> (pytorch_lightning.Trainer):\nThe PyTorch Lightning trainer instance.</li>\n<li><strong>pl_module</strong> (pytorch_lightning.LightningModule):\nThe LightningModule being trained.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Extracts the 'train_loss' metric from trainer.callback_metrics and\nappends it to the train_losses list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trainer</span>, </span><span class=\"param\"><span class=\"n\">pl_module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.on_validation_epoch_end", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.on_validation_epoch_end", "kind": "function", "doc": "<p>Called at the end of each validation epoch to collect validation\nmetrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trainer</strong> (pytorch_lightning.Trainer):\nThe PyTorch Lightning trainer instance.</li>\n<li><strong>pl_module</strong> (pytorch_lightning.LightningModule):\nThe LightningModule being validated.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Extracts 'val_loss' and 'val_acc' metrics from trainer.callback_metrics\nand appends them to their respective lists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trainer</span>, </span><span class=\"param\"><span class=\"n\">pl_module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "utils.custom_classes.LossCurveCallback.LossCurveCallback.on_train_end", "modulename": "utils.custom_classes.LossCurveCallback", "qualname": "LossCurveCallback.on_train_end", "kind": "function", "doc": "<p>Called at the end of training to generate and save plots and metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trainer</strong> (pytorch_lightning.Trainer):\nThe PyTorch Lightning trainer instance.</li>\n<li><strong>pl_module</strong> (pytorch_lightning.LightningModule):\nThe trained LightningModule.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This method performs three main tasks:</p>\n\n<ol>\n<li>Generates and saves a loss curve plot (loss_curve.png) showing\ntraining loss and validation loss over epochs.</li>\n<li>Generates and saves a validation accuracy plot (val_acc_curve.png)\nif validation accuracy was tracked.</li>\n<li>Saves all raw metric data to a JSON file (metrics.json) for later\nanalysis or reproduction.</li>\n</ol>\n\n<p>All output files are saved to the directory specified in save_dir.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trainer</span>, </span><span class=\"param\"><span class=\"n\">pl_module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();